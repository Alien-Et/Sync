name: CI Pipeline for WebdavSync

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Adjust to your Go version
          cache: true

      # Install Go dependencies
      - name: Install Go dependencies
        run: go mod download
        working-directory: .

      # Run Go linter (golangci-lint)
      - name: Run Go linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: .

      # Run Go tests
      - name: Run Go tests
        run: go test ./... -v
        working-directory: .

      # Build Go server
      - name: Build Go server
        run: go build -o webdavsync-server ./cmd/server/main.go
        working-directory: .

      # Set up Node.js environment for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Adjust to your Node.js version
          cache: 'npm'
          cache-dependency-path: web/package.json

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./web

      # Run frontend linter (if applicable)
      - name: Run frontend linter
        run: npm run lint
        working-directory: ./web
        continue-on-error: true # Adjust based on your linting strictness

      # Run frontend tests (if applicable)
      - name: Run frontend tests
        run: npm run test
        working-directory: ./web
        continue-on-error: true # Adjust if tests are mandatory

      # Build frontend
      - name: Build frontend
        run: npm run build
        working-directory: ./web

      # Upload Go binary as artifact
      - name: Upload Go binary
        uses: actions/upload-artifact@v4
        with:
          name: webdavsync-server
          path: webdavsync-server
          retention-days: 5

      # Upload frontend build as artifact
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: web/dist/
          retention-days: 5

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only deploy on push to main

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download artifacts
      - name: Download Go binary
        uses: actions/download-artifact@v4
        with:
          name: webdavsync-server
          path: ./artifacts/

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./artifacts/dist/

      # Placeholder deployment step
      - name: Deploy to server
        run: |
          echo "Deploying Go binary and frontend assets..."
          # Add your deployment logic here, e.g., SCP to a server, push to a cloud service, etc.
          # Example: scp artifacts/webdavsync-server user@server:/path/to/deploy
          # Example: rsync -av artifacts/dist/ user@server:/path/to/webroot
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}