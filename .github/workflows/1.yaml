name: 持续集成与发布

on:
  push:
    branches:
      - '**'  # 监听所有分支，避免分支不匹配
  pull_request:
    branches:
      - '**'
  release:
    types: [published]

jobs:
  调试信息:
    name: 收集调试信息
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 打印环境信息
        run: |
          echo "事件: $GITHUB_EVENT_NAME"
          echo "分支: $GITHUB_REF_NAME"
          echo "仓库: $GITHUB_REPOSITORY"
          echo "提交 SHA: $GITHUB_SHA"

      - name: 打印文件列表
        run: |
          ls -R || echo "无法列出文件"

  检查代码:
    name: 检查代码格式
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 配置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: 检查 Go 模块
        run: |
          if [ -f "go.mod" ]; then
            go mod tidy
            echo "go.mod 检查完成"
          else
            echo "go.mod 文件缺失"
          fi
        continue-on-error: true

      - name: 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package.json'

      - name: 检查前端目录
        run: |
          if [ -d "web" ] && [ -f "web/package.json" ]; then
            cd web
            npm ci || echo "前端依赖安装失败"
          else
            echo "web 目录或 package.json 缺失"
          fi
        continue-on-error: true

  构建:
    name: 构建跨平台程序
    runs-on: ${{ matrix.os }}
    needs: 检查代码
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary: webdav-sync-linux-amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary: webdav-sync-windows-amd64.exe
          - os: macos-latest
            goos: darwin
            goarch: amd64
            binary: webdav-sync-macos-amd64
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 配置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: 检查构建目录
        run: |
          if [ -d "cmd/server" ] && [ -f "cmd/server/main.go" ]; then
            echo "cmd/server/main.go 存在"
          else
            echo "cmd/server/main.go 缺失，构建将失败"
            exit 1
          fi

      - name: 构建 Go 二进制文件
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd cmd/server
          go build -o ${{ matrix.binary }}

      - name: 配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package.json'

      - name: 构建前端
        run: |
          if [ -d "web" ] && [ -f "web/package.json" ]; then
            cd web
            npm ci
            npm run build
            echo "前端构建完成"
          else
            echo "web 目录缺失，跳过前端构建"
          fi

      - name: 打包构建产物
        run: |
          mkdir -p artifacts
          cp cmd/server/${{ matrix.binary }} artifacts/
          if [ -d "web/public" ]; then
            cp -r web/public artifacts/web
          fi
          cd artifacts
          zip -r webdav-sync-${{ matrix.goos }}-${{ matrix.goarch }}.zip .
        shell: bash

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: webdav-sync-${{ matrix.goos }}-${{ matrix.goarch }}
          path: artifacts/webdav-sync-${{ matrix.goos }}-${{ matrix.goarch }}.zip
          retention-days: 7

  发布:
    name: 发布到 GitHub Releases
    runs-on: ubuntu-latest
    needs: 构建
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 准备发布文件
        run: |
          mkdir -p release
          for platform in linux-amd64 windows-amd64 macos-amd64; do
            cp artifacts/webdav-sync-$platform/webdav-sync-$platform.zip release/ || echo "$platform 产物缺失"
          done

      - name: 发布到 GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/webdav-sync-linux-amd64.zip
            release/webdav-sync-windows-amd64.zip
            release/webdav-sync-macos-amd64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}