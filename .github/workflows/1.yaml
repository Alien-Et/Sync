name: WebdavSync CI/CD 流水线

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 2. 设置 Go 环境
      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.2'  # 与 go.mod 保持一致
          cache: true

      # 3. 解决 golangci-lint 报错的关键步骤
      - name: 初始化 Go 模块
        run: |
          go mod tidy
          go mod verify
        working-directory: .

      # 4. 运行代码检查 (修复了 typecheck 问题)
      - name: 运行 Go 静态检查
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.56.2  # 指定稳定版本
          args: --timeout=5m --verbose
          working-directory: .
          skip-pkg-cache: true  # 避免缓存问题

      # 5. 运行单元测试
      - name: 运行 Go 测试
        run: |
          go test -coverprofile=coverage.out -v ./...
          go tool cover -func=coverage.out
        working-directory: .

      # 6. 编译后端服务
      - name: 编译 Go 服务
        run: go build -o bin/webdavsync-server ./cmd/server/main.go
        working-directory: .

      # 7. 设置 Node.js 环境
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package.json

      # 8. 前端依赖安装
      - name: 安装前端依赖
        run: npm ci
        working-directory: ./web

      # 9. 前端代码检查
      - name: 运行前端 Lint
        run: npm run lint
        working-directory: ./web
        continue-on-error: true  # Lint 错误不阻塞流程

      # 10. 前端测试
      - name: 运行前端测试
        run: npm run test
        working-directory: ./web

      # 11. 前端构建
      - name: 构建前端资源
        run: npm run build
        working-directory: ./web

      # 12. 归档构建产物
      - name: 归档后端二进制
        uses: actions/upload-artifact@v4
        with:
          name: webdavsync-server
          path: bin/webdavsync-server
          retention-days: 7

      - name: 归档前端构建
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: web/dist/
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # 仅 main 分支推送触发

    steps:
      # 1. 检出代码 (需要获取部署脚本)
      - name: 检出代码
        uses: actions/checkout@v4

      # 2. 下载构建产物
      - name: 下载后端程序
        uses: actions/download-artifact@v4
        with:
          name: webdavsync-server
          path: deploy/

      - name: 下载前端资源
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: deploy/dist/

      # 3. 安全部署 (示例)
      - name: 安全部署到服务器
        run: |
          echo "开始部署..."
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 部署后端
          scp -o StrictHostKeyChecking=no \
              deploy/webdavsync-server \
              $DEPLOY_USER@$DEPLOY_SERVER:/opt/webdavsync/
              
          # 部署前端
          rsync -avz --delete \
              deploy/dist/ \
              $DEPLOY_USER@$DEPLOY_SERVER:/var/www/webdavsync/
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_SSH_KEY }}